// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v3.12.3
// source: v1/auth/auth.proto

package auth

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAuthenticationSignIn = "/v1.auth.Authentication/SignIn"
const OperationAuthenticationSignOut = "/v1.auth.Authentication/SignOut"
const OperationAuthenticationSignUp = "/v1.auth.Authentication/SignUp"

type AuthenticationHTTPServer interface {
	SignIn(context.Context, *SignInRequest) (*SignInResponse, error)
	SignOut(context.Context, *SignOutRequest) (*emptypb.Empty, error)
	SignUp(context.Context, *SignUpRequest) (*SignUpResponse, error)
}

func RegisterAuthenticationHTTPServer(s *http.Server, srv AuthenticationHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/auth/sign-in", _Authentication_SignIn0_HTTP_Handler(srv))
	r.POST("/v1/auth/sign-up", _Authentication_SignUp0_HTTP_Handler(srv))
	r.DELETE("/v1/auth/sign-out", _Authentication_SignOut0_HTTP_Handler(srv))
}

func _Authentication_SignIn0_HTTP_Handler(srv AuthenticationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SignInRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthenticationSignIn)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SignIn(ctx, req.(*SignInRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SignInResponse)
		return ctx.Result(200, reply)
	}
}

func _Authentication_SignUp0_HTTP_Handler(srv AuthenticationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SignUpRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthenticationSignUp)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SignUp(ctx, req.(*SignUpRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SignUpResponse)
		return ctx.Result(200, reply)
	}
}

func _Authentication_SignOut0_HTTP_Handler(srv AuthenticationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SignOutRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthenticationSignOut)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SignOut(ctx, req.(*SignOutRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

type AuthenticationHTTPClient interface {
	SignIn(ctx context.Context, req *SignInRequest, opts ...http.CallOption) (rsp *SignInResponse, err error)
	SignOut(ctx context.Context, req *SignOutRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	SignUp(ctx context.Context, req *SignUpRequest, opts ...http.CallOption) (rsp *SignUpResponse, err error)
}

type AuthenticationHTTPClientImpl struct {
	cc *http.Client
}

func NewAuthenticationHTTPClient(client *http.Client) AuthenticationHTTPClient {
	return &AuthenticationHTTPClientImpl{client}
}

func (c *AuthenticationHTTPClientImpl) SignIn(ctx context.Context, in *SignInRequest, opts ...http.CallOption) (*SignInResponse, error) {
	var out SignInResponse
	pattern := "/v1/auth/sign-in"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthenticationSignIn))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthenticationHTTPClientImpl) SignOut(ctx context.Context, in *SignOutRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/auth/sign-out"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuthenticationSignOut))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthenticationHTTPClientImpl) SignUp(ctx context.Context, in *SignUpRequest, opts ...http.CallOption) (*SignUpResponse, error) {
	var out SignUpResponse
	pattern := "/v1/auth/sign-up"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthenticationSignUp))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
