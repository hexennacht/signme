// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// CredentialsColumns holds the columns for the "credentials" table.
	CredentialsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt64, Increment: true},
		{Name: "credential_type", Type: field.TypeEnum, Enums: []string{"private", "public"}, Default: "private"},
		{Name: "credential", Type: field.TypeJSON},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime},
	}
	// CredentialsTable holds the schema information for the "credentials" table.
	CredentialsTable = &schema.Table{
		Name:       "credentials",
		Columns:    CredentialsColumns,
		PrimaryKey: []*schema.Column{CredentialsColumns[0]},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt64, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "username", Type: field.TypeString, Unique: true},
		{Name: "password", Type: field.TypeString},
		{Name: "profile_picture", Type: field.TypeString, Default: "https://picsum.photos/300/300.jpg"},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"new", "active", "banned", "deleted"}, Default: "new"},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "user_status_created_at",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[5], UsersColumns[6]},
			},
		},
	}
	// UserCredentialsColumns holds the columns for the "user_credentials" table.
	UserCredentialsColumns = []*schema.Column{
		{Name: "user_id", Type: field.TypeInt64},
		{Name: "credential_id", Type: field.TypeInt64},
	}
	// UserCredentialsTable holds the schema information for the "user_credentials" table.
	UserCredentialsTable = &schema.Table{
		Name:       "user_credentials",
		Columns:    UserCredentialsColumns,
		PrimaryKey: []*schema.Column{UserCredentialsColumns[0], UserCredentialsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_credentials_user_id",
				Columns:    []*schema.Column{UserCredentialsColumns[0]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "user_credentials_credential_id",
				Columns:    []*schema.Column{UserCredentialsColumns[1]},
				RefColumns: []*schema.Column{CredentialsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		CredentialsTable,
		UsersTable,
		UserCredentialsTable,
	}
)

func init() {
	UserCredentialsTable.ForeignKeys[0].RefTable = UsersTable
	UserCredentialsTable.ForeignKeys[1].RefTable = CredentialsTable
}
